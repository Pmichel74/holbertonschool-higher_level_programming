>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test area() method
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

# Test integer_validator() with valid input
>>> bg.integer_validator("my_int", 12)

# Test integer_validator() with invalid type
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

# Test integer_validator() with invalid value
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

# Test with negative number
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

# Test with float
>>> bg.integer_validator("average", 7.8)
Traceback (most recent call last):
TypeError: average must be an integer

# Test with None
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

# Test with missing arguments
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test with boolean
>>> bg.integer_validator("valid", True)
Traceback (most recent call last):
TypeError: valid must be an integer

# Test with list
>>> bg.integer_validator("measures", [1, 2, 3])
Traceback (most recent call last):
TypeError: measures must be an integer

# Test with dictionary
>>> bg.integer_validator("params", {"key": 1})
Traceback (most recent call last):
TypeError: params must be an integer

# Test with tuple
>>> bg.integer_validator("point", (1, 2))
Traceback (most recent call last):
TypeError: point must be an integer

# Test with large number
>>> bg.integer_validator("distance", 1000000)

# Test with empty string as name
>>> bg.integer_validator("", 1)