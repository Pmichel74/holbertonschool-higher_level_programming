# Test BaseGeometry class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test area method
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

# Test integer_validator with valid integers
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("positive", 1)

# Test integer_validator with invalid types
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator("average", 7.8)
Traceback (most recent call last):
TypeError: average must be an integer

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

# Test missing arguments
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Test with various invalid types
>>> bg.integer_validator("list", [1])
Traceback (most recent call last):
TypeError: list must be an integer

>>> bg.integer_validator("tuple", (1,))
Traceback (most recent call last):
TypeError: tuple must be an integer

>>> bg.integer_validator("dict", {1:2})
Traceback (most recent call last):
TypeError: dict must be an integer

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
TypeError: bool must be an integer

>>> bg.integer_validator("set", {1, 2, 3})
Traceback (most recent call last):
TypeError: set must be an integer

# Test with special float values
>>> bg.integer_validator("inf", float('inf'))
Traceback (most recent call last):
TypeError: inf must be an integer

>>> bg.integer_validator("nan", float('nan'))
Traceback (most recent call last):
TypeError: nan must be an integer

# Test with empty values
>>> bg.integer_validator("", 1)
>>> bg.integer_validator(None, 1)
Traceback (most recent call last):
TypeError: name must be a string