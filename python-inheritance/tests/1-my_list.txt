# 1-my_list.txt

=======================
How to Use 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

``MyList`` can be instantiated with no arguments, which will return
an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

    >>> print(my_list)
    []

Or a single argument, which must be an iterable object.

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

A ``TypeError`` will be raised if the argument is not iterable.

::

    >>> my_list = MyList("abc")
    >>> print(my_list)
    ['a', 'b', 'c']

::

    >>> my_list = MyList(123)
    Traceback (most recent call last):
    TypeError: 'int' object is not iterable

Method ``print_sorted``
=======================

The ``print_sorted`` method prints the list in ascending order.

::

    >>> my_list = MyList([3, 1, 2])
    >>> my_list.print_sorted()
    [1, 2, 3]

::

    >>> my_list = MyList([5, 3, 4, 1, 2])
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

::

    >>> my_list = MyList([])
    >>> my_list.print_sorted()
    []

::

    >>> my_list = MyList([1])
    >>> my_list.print_sorted()
    [1]

::

    >>> my_list = MyList([2, 3, 1, 4])
    >>> my_list.print_sorted()
    [1, 2, 3, 4]